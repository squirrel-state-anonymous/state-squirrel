(* MW - simplified version ** with ** the last check of the tag *)
(* authentication property in both direction *)
(* CryptoVerif succeeds to prove the two correspondance properties. *)
(* Note that, as expected, the tags are needed to prove acceptT ==> startR *)

param NT, NR, NK.

type nonce [large,fixed].
type key [large,fixed].
type message [large,fixed].

const tag0,tag1:nonce.



proba Pprf.

expand PRF_large(key, bitstring, message, hash, Pprf).
expand Xor(message, xor , zero).

(* Queries and Events *)
event acceptR(nonce,nonce,message).
event startT(nonce,nonce,message).

event acceptT(nonce,nonce,message).
event startR(nonce,nonce,message).

query xnR:nonce, xnT:nonce, x:message;
  event(acceptR(xnR,xnT,x)) ==> event(startT(xnR,xnT,x)).

query xnR:nonce, xnT:nonce, x:message;
  event(acceptT(xnR,xnT,x)) ==> event(startR(xnR,xnT,x)).


(* Channels and Processes *)
channel c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c_start, start, finish.

table keys(key).
table ids(message).

let processT(idT:message, kT:key) =
  in(c2, nR:nonce);
  new nT: nonce;
  event startT(nR,nT,hash(kT,(tag0,(nR,nT))));
  out(c3, (nT, xor(idT,hash(kT,(tag0,(nR,nT))))));
  in(c7,m3:message);
  if m3 = xor(idT,hash(kT,(tag1,(nR,nT)))) then
     (event acceptT(nR,nT,hash(kT,(tag1,(nR,nT))));
     out(c8,()))
  else out(c9,()).


let processR(idR:message, kR:key) =
  in(c0,());
  new nR: nonce;
  out(c1, nR);
  in(c4, (nT:nonce,m2:message));
  if xor(m2,hash(kR,(tag0,(nR,nT)))) = idR
  then
    ( event acceptR(nR,nT,hash(kR,(tag0,(nR,nT))));event startR(nR,nT,hash(kR,(tag1,(nR,nT))));
      out(c5, xor(idR,hash(kR,(tag1,(nR,nT)))))
    )
  else
    out(c6, ()).

process
  ( ! iK <= NK
    ( in(start, ());
      new kT:key; insert keys(kT);
      new idT:message; insert ids(idT);
      out(finish, ());
      ! iT <= NT processT(idT, kT)
    )
  |
  ( ! iR <= NR
    in(start, ());
    get keys(xkT) in
    get ids(xidT) in
    out(finish, ());
    processR(xidT, xkT)
  )
)
