(* MW - simplified version ** with ** the last check of the tag *)
(* unlinkability property 
   by Solene Moreau, Stephanie Delaune, David Baelde
   proof indications edited by B. Blanchet *)

proof {
      auto;
      show_game;
      (* Help CV apply remove_xor(xor) one more time *)
      remove_assign binder X_Oeq;
      insert before "out(c5" "let m4 = xor(idTn[u,v],r_1) in";
      use_variable m4;
      replace at 1 "{[0-9]+}({[0-9]+}xor({[0-9]+}m3, {[0-9]+}idTn) = {[0-9]+}r_1[{[0-9]+}u_4])"
        "m4[u_4] = m3";
      crypto remove_xor(xor) r_1;

      start_from_other_end;
      auto;
      show_game;
      (* Help CV apply remove_xor(xor) one more time *)
      remove_assign binder X_Oeq_2;
      insert before "out(c5" "let m4_1 = xor(idTn_1[v_1],r_5) in";
      use_variable m4_1;
      replace at 1 "{[0-9]+}({[0-9]+}xor({[0-9]+}m3_1, {[0-9]+}idTn_1) = {[0-9]+}r_5[{[0-9]+}u_10])"
        "m4_1[u_10] = m3_1";
      crypto remove_xor(xor) r_5;
      (* Rewrite a find that has one useless index *)      
      insert before "find u_1" "find i <= NT, j <= NK suchthat defined(r_6[i, j], nR_4[i, j], nT_4[i, j]) && (nT_5 = nT_4[i, j]) && (nR_5 = nR_4[i, j]) && (m2_1 = r_6[i, j]) then";
      show_game;
      simplify;
      show_game;
      remove_assign useless;
      show_game;
      success 
      }

param NT, NR, NK.

type nonce [large,fixed].
type key [large,fixed].
type message [large,fixed].

const tag0,tag1:nonce.

proba Pprf.

expand PRF_large(key, bitstring, message, hash, Pprf).
expand Xor(message, xor , zero).

channel c0, c1, c2, c3, c4, c5, c6, c7,c8, c9, startid, finishid, startsess, finishsess.

let processT(idT:message, kT:key) =
  in(c2, nR:nonce);
  new nT: nonce;
  out(c3, (nT, xor(idT,hash(kT,(tag0,(nR,nT))))));
  in(c7,m3:message);
  if m3 = xor(idT,hash(kT,(tag1,(nR,nT)))) then 
     out(c8,())
  else out(c9,()). 


let multiple =
 ( ! iK <= NK
   in(startid, ());
   new kTn:key;
   new idTn:message;
   let kTm:key = kTn in
   let idTm:message = idTn in
   out(finishid, ());
   ! iT <= NT
   in(startsess, ());
   out(finishsess, ());
   processT(idTm,kTm)
 )|(
   ! iR <= NR
    in(c0,());
    new nR: nonce;
    out(c1, nR);
    in(c4, (nT:nonce,m2:message));
    find u = i <= NT, v = j <= NK suchthat
      defined(kTm[j],idTm[j]) && xor(m2,hash(kTm[j],(tag0,(nR,nT)))) = idTm[j]
    then
      out(c5, xor(idTm[v],hash(kTm[v],(tag1,(nR,nT))))) 
    else
      out(c6, ())
 ).

let single =
 ( ! iK <= NK
   in(startid, ());
   out(finishid, ());
   ! iT <= NT
   in(startsess, ());
   new kTn:key;
   new idTn:message;
   let kTs:key = kTn in
   let idTs:message = idTn in
   out(finishsess, ());
   processT(idTs,kTs)
 )|(
   ! iR <= NR
    in(c0,());
    new nR: nonce;
    out(c1, nR);
    in(c4, (nT:nonce,m2:message));
    find u = i <= NT, v = j <= NK suchthat
      defined(kTs[i,j],idTs[i,j]) && xor(m2,hash(kTs[i,j],(tag0,(nR,nT)))) = idTs[i,j]
    then
        out(c5, xor(idTs[u,v],hash(kTs[u,v],(tag1,(nR,nT))))) 
    else
      out(c6, ())
 ).

equivalence single multiple

(* EXPECTED
All queries proved.
0.096s (user 0.080s + system 0.016s), max rss 16844K
END *)

