(* An attempt to encode an authentication property for basic hash *)
(* StÃ©phanie Delaune *)

(* In this file, we assume only collision resistance, which should not be
enough to prove the authentication goal.*)

(* Expected output *)
(* RESULT Could not prove event(acceptR(xn, xk)) ==> event(startT(xn, xk)). *)

param NT, NR, NK.

type doublenonce [large, fixed].
type nonce [large,fixed].
type key [large,fixed].
type hashed [large,fixed].
type hash_key [fixed].


fun concat1(nonce, nonce):doublenonce [data].

proba Phash.

expand CollisionResistant_hash_2(hash_key, key, doublenonce, hashed, hash, hashoracle, Phash).


(* Queries and Events *)
event acceptR(nonce,nonce,key).
event startT(nonce,nonce,key).

query xn:nonce, xm:nonce, xk:key; event(acceptR(xn,xm, xk)) ==> event(startT(xn,xm,xk)).

(* Channels and Processes *)
channel c_start, c0, c1, c2, c3, start, finish.


table keys(key).

let processT(kT:key, hk: hash_key) =
        in(c0, xnR:nonce);
        new nT: nonce;
        event startT(nT,xnR, kT);
	out(c1, (nT, hash(hk,kT,concat1(xnR,nT)))).

let processR(kR:key, hk: hash_key) =
    in(c_start,());
    new nR:nonce;       
    out(c3,nR);
       in(c2,(xnT:nonce,m2:hashed));
       if m2 = hash(hk,kR,concat1(nR,xnT)) then event acceptR(xnT,nR, kR).

process
     in(c_start,());
     new hk: hash_key;
     out(c_start,());
        ( ! iK <= NK (in(start, ());  new kT:key; insert keys(kT); out(finish, ());  ! iT <= NT processT(kT, hk))
        |   (! iR <= NR in(start, ());  get keys(xkT) in   out(finish, ()); processR(xkT, hk))
	| hashoracle(hk))
